package core.ui{	import core.Core;	import core.animation.Tween;	import core.display.MoveClip;	import core.text.TextStyles;	import core.utils.DisplayUtils;		import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Stage;	import flash.events.Event;	import flash.events.MouseEvent;
		public class Accordion extends MovieClip  {		private var _accordion:Boolean;				private var _holder:MoveClip;		private var _filler:MovieClip;		private var _entries:Array;		private var _titles:Array;		private var _contents:Array;		private var _currentID:int;						public function set accordion(val:Boolean):void		{			_accordion = val;			if(_entries.length > 0) updateState(0);		}				public function Accordion()		{			_currentID = 0;			_accordion = true;						_holder = new MoveClip();			_entries = new Array();			_titles = new Array();			_contents = new Array();			_filler = new MovieClip();						_filler.graphics.beginFill(0xFF0000, 0);			_filler.graphics.drawRect(0, 0, 100, 100);			_filler.graphics.endFill();						addChild(_filler);			addChild(_holder);						if(stage) construct();			else addEventListener(Event.ADDED_TO_STAGE, construct);		}						// PUBLIC FUNCTIONS		public function append(title:String, content:MovieClip):void		{			var entry:MovieClip = new MovieClip();			var entryTitle:MovieClip = new MovieClip();			var contentMask:MovieClip = new MovieClip();			var titleField:Label = new Label(title, TextStyles.LIST_TITLE);			//var titleBackground:Component = Component.get("ListTitleBackground");			//var contentBackground:Component = Component.get("ListContentBackground");			var titleBackground:DisplayObject = new Sprite();			var contentBackground:DisplayObject = new Sprite();						entry.y = _holder.height;			titleField.y = (titleBackground.height - titleField.height) / 2;						entryTitle.addChild(titleBackground);			entryTitle.addChild(titleField);						content.addChild(contentBackground);			content.setChildIndex(contentBackground, 0);			contentBackground.width = content.width;			contentBackground.height = content.height;			content.y = entryTitle.y + entryTitle.height;						entry.addChild(entryTitle);			entry.addChild(content);						_holder.addChild(entry);						if (_entries.length > 0)			{				//$(content).slideUp(0);			}									DisplayUtils.overlay(entryTitle);			entryTitle.id = _titles.length;			entryTitle.buttonMode = true;			entryTitle.addEventListener(MouseEvent.CLICK, onTitleClick);						_entries.push(entry);			_titles.push(entryTitle);			_contents.push(content);						updateState(0);			updateFiller();			adjustList(0);		}				public function open(id:int):void		{			_currentID = id;			if (_contents.length >= id) updateState();		}						private function construct(event:Event = null):void		{			if(event) removeEventListener(Event.ADDED_TO_STAGE, construct);			addEventListener(Event.REMOVED_FROM_STAGE, dispose);						updateState(0);		}				private function updateState(duration:* = null):void		{			if (duration == null) duration = Tween.NORMAL;						if (_accordion)			{				for each (var content:MovieClip in _contents)				{					Tween.stop(content);					Tween.insert(content).slideUp(duration);										if (duration == 0) content.mask.height = content.height;				}								if (_contents[_currentID])				{					Tween.stop(_contents[_currentID]);					Tween.insert(_contents[_currentID]).slideDown(duration).insert({onUpdate: adjustList, onUpdateParams: [0]}, duration);										if (duration == 0) _contents[_currentID].mask.height = 0;				}			}						if (duration == 0) adjustList(0);		}						private function updateFiller():void		{			_filler.width = _filler.height = 0;			_filler.width = _holder.width;			_filler.height = _holder.height;		}						// EVENTS		private function adjustList(id:int):void		{			for (var i:int = id; i < _entries.length; i++)			{				if (i == 0) continue;				_entries[i].y =					_entries[i - 1].y +					_contents[i - 1].y +					_contents[i - 1].height;								if (_contents[i - 1].mask)					_entries[i].y = _entries[i].y - (_contents[i - 1].height - _contents[i - 1].mask.height);			}						updateFiller();		}				private function onTitleClick(event:MouseEvent):void		{			if(int(event.currentTarget.id) == _currentID) return;						_currentID = int(event.currentTarget.id);			updateState();		}				private function dispose(event:Event):void		{			for each (var entryTitle:MovieClip in _titles)			{				entryTitle.removeEventListener(MouseEvent.CLICK, onTitleClick);			}						removeEventListener(Event.REMOVED_FROM_STAGE, dispose);		}			}}