package core.ui.controls{  import core.actions.monitorClip;  import core.actions.tint;  import core.actions.unmonitorClip;  import core.animation.Tween;  import core.api.Lib;  import core.api.def.stage;  import core.display.MoveClip;  import core.events.MonitorEvent;  import core.events.MoveEvent;  import core.ui.UI;  import core.ui.controls.abstract.AbstractControl;  import core.utils.DisplayUtils;    import flash.display.BlendMode;  import flash.display.DisplayObject;  import flash.display.Sprite;  import flash.events.Event;  import flash.events.MouseEvent;
    public class ScrollBar extends AbstractControl  {    private const SCROLL_FRICTION:Number = 1;    		public var position:Number;		    private var _background:DisplayObject;    private var _arrowTop:Sprite;    private var _arrowBottom:Sprite;		private var _handle:MoveClip;        private var _target:*;    private var _match:*;        private var _findScrollTarget:String;            // Helper    private var _store:Object;		private var _percentage:Number;    				override public function tint():void		{			if (ready)			{				for each (var child:Sprite in [_arrowTop, _arrowBottom, _handle])				core.actions.tint(child.getChildByName('highlight'), UI.color);			}		}		    public function get target():* { return _target; }    public function set target(value:*):void    {      _target = value;    }            [Inspectable(name="Scroll Content", type=String, defaultValue='')]    public function set findTarget(value:String):void    {      _findScrollTarget = value;      if (ready) findScrollTarget();      //update();    }        public function get match():* { return _match; }    public function set match(value:*):void    {      //if (_target) _target.mask = value;      //super.mask = value;      _match = value;            monitorClip(_match, update, update);      //update();    }                public function ScrollBar():void    {      super();      _store = {};    }                override public function draw():void    {      _background = Lib.get('ui/scrollbar/scrollbar.background');      			_handle = new MoveClip();      _arrowTop = new Sprite();      _arrowBottom = new Sprite();						_handle.buttonMode = true;      _arrowTop.buttonMode = true;      _arrowBottom.buttonMode = true;						_handle.friction.release = 0;			_handle.borders.x = [0, 0];						_handle.addChild(Lib.get('ui/scrollbar/scrollbar.handle.background', 'background'));			_handle.addChild(Lib.get('ui/scrollbar/scrollbar.handle.top', 'top'));			_handle.addChild(Lib.get('ui/scrollbar/scrollbar.handle.top', 'bottom'));			_handle.addChild(Lib.get('ui/scrollbar/scrollbar.handle', 'handle'));			_handle.addChild(Lib.getNew(Sprite, 'highlight'));			      _arrowTop.addChild(Lib.get('ui/scrollbar/scrollbar.arrow'));      _arrowTop.addChild(Lib.get('ui/scrollbar/scrollbar.arrow.active', 'active'));      _arrowTop.addChild(Lib.getNew(Sprite, 'highlight'));            _arrowBottom.addChild(Lib.get('ui/scrollbar/scrollbar.arrow'));      _arrowBottom.addChild(Lib.get('ui/scrollbar/scrollbar.arrow.active', 'active'));      _arrowBottom.addChild(Lib.getNew(Sprite, 'highlight'));      _arrowBottom.scaleY = -1;						_handle.y = _arrowTop.height;      			rearrange();      			var child:Sprite;			      for each (child in [_arrowTop, _arrowBottom, _handle])      {				child = Sprite(child.getChildByName('highlight'));				child.graphics.clear();				child.graphics.beginFill(0x0033BB, .75);				//child.graphics.beginFill(0x000000, 1);        child.graphics.drawRect(0, 0, child.parent.width, child.parent.height);        child.graphics.endFill();        child.blendMode = BlendMode.OVERLAY;        child.alpha = 0;      }                  _arrowBottom.getChildByName('active').alpha = _arrowTop.getChildByName('active').alpha = 0;            this.addChild(_background);      this.addChild(_arrowTop);			this.addChild(_arrowBottom);			this.addChild(_handle);            findScrollTarget();      rearrange();    }            override public function construct():void    {      if (_target && _target.mask && !_match) _match = _target.mask;      if (_match) _background.height = DisplayUtils.realHeight(_match);      _arrowBottom.y = _background.height;      //update();            core.api.def.stage.addEventListener(MouseEvent.MOUSE_WHEEL, scrollContent);      core.api.def.stage.addEventListener(MouseEvent.MOUSE_UP, stopScrolling);            this.addEventListener(MouseEvent.ROLL_OVER, activateArrows);      this.addEventListener(MouseEvent.ROLL_OUT, deActivateArrows);            _arrowTop.addEventListener(MouseEvent.ROLL_OVER, highlightArrow);      _arrowTop.addEventListener(MouseEvent.ROLL_OUT, darkenArrow);      _arrowTop.addEventListener(MouseEvent.MOUSE_DOWN, scrollUp);            _arrowBottom.addEventListener(MouseEvent.ROLL_OVER, highlightArrow);      _arrowBottom.addEventListener(MouseEvent.ROLL_OUT, darkenArrow);      _arrowBottom.addEventListener(MouseEvent.MOUSE_DOWN, scrollDown);						_handle.addEventListener(MouseEvent.ROLL_OVER, highlightArrow);			_handle.addEventListener(MouseEvent.ROLL_OUT, darkenArrow);      _handle.addEventListener(MoveEvent.POSITION_UPDATE, positionContent);    }        override public function dispose():void    {      if (_match) unmonitorClip(_match);            core.api.def.stage.removeEventListener(MouseEvent.MOUSE_WHEEL, scrollContent);      core.api.def.stage.removeEventListener(MouseEvent.MOUSE_UP, stopScrolling);            this.removeEventListener(MouseEvent.ROLL_OVER, activateArrows);      this.removeEventListener(MouseEvent.ROLL_OUT, deActivateArrows);			this.removeEventListener(Event.ENTER_FRAME, scroll);            _arrowTop.removeEventListener(MouseEvent.ROLL_OVER, highlightArrow);      _arrowTop.removeEventListener(MouseEvent.ROLL_OUT, darkenArrow);      _arrowTop.removeEventListener(MouseEvent.MOUSE_DOWN, scrollUp);            _arrowBottom.removeEventListener(MouseEvent.ROLL_OVER, highlightArrow);      _arrowBottom.removeEventListener(MouseEvent.ROLL_OUT, darkenArrow);      _arrowBottom.removeEventListener(MouseEvent.MOUSE_DOWN, scrollDown);						_handle.removeEventListener(MouseEvent.ROLL_OVER, highlightArrow);			_handle.removeEventListener(MouseEvent.ROLL_OUT, darkenArrow);			_handle.removeEventListener(MoveEvent.POSITION_UPDATE, positionContent);    }                    private function rearrange():void    {			var bottom:DisplayObject     = DisplayObject(_handle.getChildByName('bottom'));			var background:DisplayObject = DisplayObject(_handle.getChildByName('background'));			var handle:DisplayObject     = DisplayObject(_handle.getChildByName('handle'));						bottom.scaleY = -1;						background.height = handle.height * 4;			bottom.y = background.height;			handle.y = Math.round((background.height - handle.height) / 2);						_handle.friction.release = 0;    }            private function update(e:MonitorEvent):void    {      _background.height = e.height;      _arrowBottom.y = _background.height;						_handle.borders.y = [_arrowTop.height, _arrowBottom.y - _arrowBottom.height - _handle.height];    }            private function keepBounds():void    {      /*      var top:Number = (_bounds.y);      var bottom:Number = (_bounds.y + _bounds.height - _target.height);      if (target.y > top) target.y = top;      if (target.y < bottom) target.y = bottom;      _target.y = Math.max(Math.min(_target.y, top), bottom);      */						position = Math.max(Math.min(_target.y, _match.y), _match.y + DisplayUtils.realHeight(_match) - _target.height);      _target.y = position;			//if (_target.hasOwnProperty('move')) _target['move'](_target.x, Math.max(Math.min(_target.y, _match.y), _match.y + DisplayUtils.realHeight(_match) - _target.height));						_percentage = _target.y / (_match.y + DisplayUtils.realHeight(_match) - _target.height);			_handle.y = (_handle.borders.y[1] - _handle.borders.y[0]) * _percentage + _handle.borders.y[0];		}                private function findScrollTarget():void    {      if (!_findScrollTarget) return;      _target = Sprite(this.parent[_findScrollTarget]);    }                // EVENTS    		// USER INTERACTIONS		    // mouse wheel    private function scrollContent(e:MouseEvent):void    {      if (_target.hitTestPoint(e.stageX, e.stageY) || _match.hitTestPoint(e.stageX, e.stageY))      {        if (!_store.target) _store.target = _target.y;        _store.target = _store.target + e.delta*15*SCROLL_FRICTION;        Tween.to(_target, Tween.SLOW, {y: _store.target, onUpdate:keepBounds});      }    }        // arrows top / bottom    private function scrollUp(e:MouseEvent):void   { initScrolling(50); }    private function scrollDown(e:MouseEvent):void { initScrolling(-50); }						private function initScrolling(direction:Number):void		{      _store.target = null;      _store.direction = direction;			_store.scrolling = true;      Tween.to(_target, Tween.FAST, {y: _target.y + direction*.5, onUpdate:keepBounds, onComplete:startScrolling});    }        				    private function stopScrolling(e:MouseEvent = null):void		{			_store.scrolling = false;			this.removeEventListener(Event.ENTER_FRAME, scroll);		}		    private function startScrolling():void		{			this.removeEventListener(Event.ENTER_FRAME, scroll);			if (_store.scrolling) this.addEventListener(Event.ENTER_FRAME, scroll);		}        private function scroll(e:Event):void    {      _store.direction *= 1.01;      Tween.to(_target, Tween.SLOW, {y: _target.y + _store.direction, onUpdate:keepBounds});    }    						private function positionContent(e:MoveEvent):void		{      _store.target = null;			_percentage = ((_handle.y - _handle.borders.y[0]) / (_handle.borders.y[1] - _handle.borders.y[0]));			Tween.to(_target, Tween.SLOW, {y: (_match.y + DisplayUtils.realHeight(_match) - _target.height) * _percentage});		}                private function activateArrows(e:MouseEvent):void    {      Tween.to(_arrowTop.getChildByName('active'), Tween.NORMAL, {alpha: 1});			Tween.to(_arrowBottom.getChildByName('active'), Tween.NORMAL, {alpha: 1});    }        private function deActivateArrows(e:MouseEvent):void    {      Tween.to(_arrowTop.getChildByName('active'), Tween.NORMAL, {alpha: 0});      Tween.to(_arrowBottom.getChildByName('active'), Tween.NORMAL, {alpha: 0});    }        private function highlightArrow(e:MouseEvent):void { Tween.to(e.currentTarget.getChildByName('highlight'), Tween.NORMAL, {alpha: 1}); }    private function darkenArrow(e:MouseEvent):void { Tween.to(e.currentTarget.getChildByName('highlight'), Tween.NORMAL, {alpha: 0}); }          }}