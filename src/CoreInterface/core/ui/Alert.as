package core.ui{	import core.Core;	import core.actions.dynamicFunctionCall;	import core.actions.tint;	import core.animation.Tween;	import core.animation.tweenlite.easing.Elastic;	import core.api.Lib;	import core.text.TextArea;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;
		public class Alert extends Overlay	{		public static const OK:int = 1;		public static const CANCEL:int = 2;		public static const YES:int = 10;		public static const NO:int = 20;				private static const SCALE:Number = 0.95;		private static const MAX_WIDTH:Number = 400;		private static const BUTTON_PADDING:Number = 15;				private static var _window:Sprite;		private static var _instance:Alert;		private static var _singleton:Boolean;				private var _callback:Function;						public static function show(text:String = '', title:String = '', buttons:Array = null, closeHandler:Function = null):Alert		{			_singleton = true;			_instance = new Alert(text, title, buttons, closeHandler);			return _instance;		}				public static function hide():void		{			Tween.start(_instance).append({ease: Tween.EASE_OUT, alpha: 0, scaleX: SCALE, scaleY: SCALE, onComplete:remove}, Tween.NORMAL);		}								private static function remove():void		{			if (_instance.parent) _instance.parent.removeChild(_instance);		}										public function Alert(text:String = '', title:String = '', buttons:Array = null, closeHandler:Function = null)		{			if (!_singleton) throw new Error('Alert can only be shown via  >  Alert.show  <');			_singleton = false;						_callback = closeHandler;						// BUTTONS			if (buttons == null) buttons = [OK, CANCEL];						var buttonHolder:Sprite = new Sprite();			var button:DynamicButton;			var textTitle:Label;			var textArea:TextArea;			var background:Sprite;						var buttonID:int;						for each (buttonID in buttons)			{				button = new DynamicButton();				button.addEventListener(MouseEvent.CLICK, reportClick);				button.label = getLabel(buttonID);				button.style = 'Alert.button';				button.defaultStyle = Lib.get('ui/alert/alert.button.off');				button.hoverStyle = Lib.get('ui/alert/alert.button');				button.downStyle = core.actions.tint(Lib.get('ui/alert/alert.button.off'), 0x353535);				button.id = buttonID;								if (buttonHolder.width > 0) button.x = buttonHolder.width + BUTTON_PADDING;				buttonHolder.addChild(button);			}						textTitle = new Label(title, 'Alert.title');						textArea = new TextArea(text, 'Alert.text');			textArea.width = buttonHolder.width;						background = getBackground(Math.max(buttonHolder.width, textArea.width), Math.max(buttonHolder.height + textArea.height, 150));						buttonHolder.x = buttonHolder.width*-.5;			buttonHolder.y = (background.height / 2) - BUTTON_PADDING * 1.5 - button.height;						textTitle.x = textTitle.width*-.5;			textTitle.y = 0 - (background.height / 2) + BUTTON_PADDING * 1.5;						textArea.x = textArea.width*-.5;			textArea.y = textArea.height*-.5-buttonHolder.height*.5;									_window = new Sprite();			_window.addChild(background);			_window.addChild(textArea);			_window.addChild(textTitle);			_window.addChild(buttonHolder);									_window.addEventListener(Event.REMOVED_FROM_STAGE, dispose);			//_window.alpha = .5;			_window.scaleX = _window.scaleY = SCALE;			this.addChild(_window);						Tween.stop(_window).append({ease: Elastic.easeOut, scaleX: 1, scaleY: 1}, Tween.SLOW);						Core.root.mouseChildren = false;			Core.root.mouseEnabled = false;			Core.stage.addChild(this);		}				override protected function dispose(event:Event):void		{			super.dispose(new Event(Event.REMOVED_FROM_STAGE));						event.currentTarget.removeEventListener(Event.REMOVED_FROM_STAGE, dispose);			Core.root.mouseChildren = true;			Core.root.mouseEnabled = true;						_instance = null;		}				override protected function resize(event:Event=null):void		{			super.resize();		}						private function reportClick(e:MouseEvent):void		{			core.actions.dynamicFunctionCall(_callback, e.currentTarget.id);			hide();		}								private function getLabel(labelID:int):String		{			switch (labelID)			{				case OK:     return 'OK';				case YES:    return 'YES';				case NO:     return 'NO';				case CANCEL: return 'Cancel';			}						return 'Button';		}						private function getBackground(width:Number, height:Number):Sprite		{			var container:Sprite = new Sprite();						var background:DisplayObject   = Lib.get('ui/alert/alert.background');			var top:DisplayObject          = Lib.get('ui/alert/alert.top');			var bottom:DisplayObject       = Lib.get('ui/alert/alert.bottom');			var left:DisplayObject         = Lib.get('ui/alert/alert.left');			var topLeft:DisplayObject      = Lib.get('ui/alert/alert.top.left');			var bottomLeft:DisplayObject   = Lib.get('ui/alert/alert.bottom.left');						var right:DisplayObject        = Lib.get('ui/alert/alert.left'); 			var topRight:DisplayObject     = Lib.get('ui/alert/alert.top.left');			var bottomRight:DisplayObject  = Lib.get('ui/alert/alert.bottom.left');									container.addChild(background);			container.addChild(top);			container.addChild(bottom);			container.addChild(left);			container.addChild(right);			container.addChild(topLeft);			container.addChild(topRight);			container.addChild(bottomLeft);			container.addChild(bottomRight);						background.width = background.width * .25;			background.scaleY = .5;						background.width = width;			background.height = height;									var _ratio:Number = Math.min(background.scaleX, background.scaleY);			top.width = bottom.width = background.width;			//_background.scaleX = _background.scaleY = _ratio;			top.scaleX = top.scaleY = _ratio;			bottom.scaleX = bottom.scaleY = _ratio;			left.scaleX = left.scaleY = _ratio;			right.scaleX = right.scaleY = _ratio;			topLeft.scaleX = topLeft.scaleY = _ratio;			topRight.scaleX = topRight.scaleY = _ratio;			bottomLeft.scaleX = bottomLeft.scaleY = _ratio;			bottomRight.scaleX = bottomRight.scaleY = _ratio;						left.height = right.height = background.height;			background.x = topLeft.width;			background.y = topLeft.height;									right.scaleX = -1 * _ratio;			topRight.scaleX = -1 * _ratio;			bottomRight.scaleX = -1 * _ratio;						top.x = bottom.x = topLeft.width;			topRight.x = bottomRight.x = right.x = top.x + top.width + topRight.width;						bottomRight.y = bottom.y = bottomLeft.y = background.y + background.height;						left.y = right.y = topLeft.height;									// GENERATING BITMAP						var bitmapData:BitmapData = new BitmapData(container.width, container.height, true, 0x000000);			bitmapData.draw(container, null, null, null, null, true);						var bitmap:Bitmap = new Bitmap(bitmapData, 'auto', true);			bitmap.x = bitmap.width * -.5;			bitmap.y = bitmap.height * -.5;						container = new Sprite();			container.addChild(bitmap);						return container;		}							}}