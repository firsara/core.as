/*com.firsara.utils.UnpackerCopyright (c) 2011 Fabian Irsara (info@fabian-irsara.com)Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/package core.net{	import core.net.zip.ZipEntry;	import core.net.zip.ZipFile;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.ProgressEvent;	import flash.filesystem.File;	import flash.filesystem.FileMode;	import flash.filesystem.FileStream;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLStream;	import flash.utils.setTimeout; 	public class Unpacker extends EventDispatcher	{		public static const UNPACK_FILE:String = "unpack";				private var _directory:String;		private var _currentFile:String;		private var _percentage:Number;		private var _stream:URLStream;		private var _zipFile:ZipFile; 		public function get percentage()   :Number { return _percentage; }		public function get currentFile()  :String { return _currentFile; }		public function get directory()    :String { return _directory; }		public function set directory(value:String):void		{			_directory = value;						if ((_directory != "") &&					(_directory.charAt(_directory.length - 1) != "/"))			{				_directory += "/";			}						_directory.replace(/\\/gi, "/");		}		 		public function unpack(url:String):void		{			if (url.indexOf('http://') < 0) url = 'http://' + url;					 _stream = new URLStream();		 _stream.load(new URLRequest(url));		 _stream.addEventListener(ProgressEvent.PROGRESS, showProgress);		 _stream.addEventListener(Event.COMPLETE, extract);		}								public function Unpacker(dir:String = ''):void		{			_percentage = 0;			directory = dir;		}					 		 		private function showProgress(event:ProgressEvent):void		{		 _percentage = Number(event.bytesLoaded / event.bytesTotal);		 dispatchEvent(event);		}		private function dispatchComplete():void		{			dispatchEvent(new Event(Event.COMPLETE));		}		 		private function extract(e:Event):void		{		 _stream.removeEventListener(ProgressEvent.PROGRESS, showProgress);		 _stream.removeEventListener(Event.COMPLETE, extract);		 			_zipFile = new ZipFile(_stream);			extractFile(0);		}				private function extractFile(id:int):void		{			var applicationDirectory:File = File.applicationDirectory;			var filePath:String;			var zipEntry:ZipEntry;						zipEntry = ZipEntry(_zipFile.entries[id]);			filePath = applicationDirectory.nativePath.toString();			filePath += ("/" + _directory + zipEntry.name);						_currentFile = zipEntry.name;			 			var storage:File = new File(filePath);			if (zipEntry.name.charAt(zipEntry.name.length - 1) == '/')			{				storage.createDirectory();			}			else			{				var entry:FileStream = new FileStream();				entry.open(storage, FileMode.WRITE);				entry.writeBytes(_zipFile.getInput(zipEntry));				entry.close();			}						dispatchEvent(new ProgressEvent(UNPACK_FILE));						if (id >= _zipFile.entries.length - 1) dispatchComplete();			else setTimeout(extractFile, 50, (id + 1));		}					}}