package core.display{  import core.events.SwipeEvent;    import flash.events.Event;  import flash.events.TransformGestureEvent;		public class TransformClip extends MoveClip	{		private var _scale:Array;				override public function holdBorders():void		{			super.holdBorders();						if      (this.scaleX < _scale[0]) this.scaleX = this.scaleY = _scale[0];			else if (this.scaleX > _scale[1]) this.scaleX = this.scaleY = _scale[1];		}				public function lockRotation():void		{			this.removeEventListener(TransformGestureEvent.GESTURE_ROTATE, rotate);		}				public function freeRotation():void		{			lockRotation();			this.addEventListener(TransformGestureEvent.GESTURE_ROTATE, rotate);		}				// BORDERS		public function get scale():Array { return _scale; }		public function set scale(value:Array):void {			_scale = value;			this.holdBorders();		}								public function TransformClip()		{			super();			_scale = [.25, 1];						//this.addEventListener(TransformGestureEvent.GESTURE_PAN, pan);			this.addEventListener(TransformGestureEvent.GESTURE_ROTATE, rotate);			this.addEventListener(TransformGestureEvent.GESTURE_ZOOM, zoom);			this.addEventListener(TransformGestureEvent.GESTURE_SWIPE, swipe);						this.addEventListener(Event.REMOVED_FROM_STAGE, dispose);		}						private function pan(event:*):void		{			this.x += event.offsetX;			this.y += event.offsetY;		}				private function rotate(event:*):void		{			this.rotation += event.rotation;		}				private function zoom(event:*):void		{			this.scaleX = this.scaleY = this.scaleX * (event.scaleX + event.scaleY) / 2;			if (!free) holdBorders();		}						private function swipe(event:*):void		{			if (event.offsetX > 0) dispatchEvent(new SwipeEvent(SwipeEvent.SWIPE_RIGHT));			else if (event.offsetX < 0) dispatchEvent(new SwipeEvent(SwipeEvent.SWIPE_LEFT));						if (event.offsetY > 0) dispatchEvent(new SwipeEvent(SwipeEvent.SWIPE_DOWN));			else if (event.offsetY < 0) dispatchEvent(new SwipeEvent(SwipeEvent.SWIPE_UP));		}								private function dispose(event:Event):void		{			//this.removeEventListener(TransformGestureEvent.GESTURE_PAN, pan);			this.removeEventListener(TransformGestureEvent.GESTURE_ROTATE, rotate);			this.removeEventListener(TransformGestureEvent.GESTURE_ZOOM, zoom);			this.removeEventListener(TransformGestureEvent.GESTURE_SWIPE, swipe);						this.removeEventListener(Event.REMOVED_FROM_STAGE, dispose);		}	}}