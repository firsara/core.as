package core.display{	import flash.events.MouseEvent;	import flash.events.TransformGestureEvent;	import flash.display.Sprite;	import flash.geom.Matrix;	import flash.geom.Point;	import flash.ui.Multitouch; 	public class Touchable extends Sprite	{		private static const _scale:Array = [0.25, 1];				private var offsetX:Number;		private var offsetY:Number; 		public function Touchable()		{			this.cacheAsBitmap = true;			this.cacheAsBitmapMatrix = new Matrix();			this.addEventListener(MouseEvent.MOUSE_DOWN, startDragging);			this.addEventListener(MouseEvent.MOUSE_UP, stopDragging);			this.addEventListener(TransformGestureEvent.GESTURE_ROTATE, onGestureRotate);			this.addEventListener(TransformGestureEvent.GESTURE_ZOOM, onGesturePinch);		} 		private function startDragging(event:MouseEvent):void		{			setAsCurrentChild();			offsetX = event.stageX - this.x;			offsetY = event.stageY - this.y;			stage.addEventListener(MouseEvent.MOUSE_MOVE, moveImage);		} 		private function stopDragging(event:MouseEvent):void		{			stage.removeEventListener(MouseEvent.MOUSE_MOVE, moveImage);		} 		private function moveImage(event:MouseEvent):void		{			this.x = event.stageX - offsetX;			this.y = event.stageY - offsetY;			event.updateAfterEvent();		} 		private function onGesturePinch(e:*):void{			this.scaleX = this.scaleY = Math.max(_scale[0], Math.min(this.scaleX * (e.scaleX + e.scaleY) / 2, _scale[1]));			/*			setAsCurrentChild();			var pinchMatrix:Matrix = this.transform.matrix;			var pinchPoint:Point = pinchMatrix.transformPoint(new Point((this.width/2), (this.height/2)));			pinchMatrix.translate(-pinchPoint.x, -pinchPoint.y);			pinchMatrix.scale(pinchEvent.scaleX, pinchEvent.scaleY);			pinchMatrix.translate(pinchPoint.x, pinchPoint.y);			this.transform.matrix = pinchMatrix;			*/		} 		private function onGestureRotate(e:*):void		{			this.rotation += e.rotation;			/*			setAsCurrentChild();			var rotateMatrix:Matrix = this.transform.matrix;			var rotatePoint:Point = rotateMatrix.transformPoint(new Point((this.width/2), (this.height/2)));			rotateMatrix.translate(-rotatePoint.x, -rotatePoint.y);			rotateMatrix.rotate(rotateEvent.rotation*(Math.PI/180));			rotateMatrix.translate(rotatePoint.x, rotatePoint.y);			this.transform.matrix = rotateMatrix;			*/ 		} 		private function setAsCurrentChild():void{			this.parent.setChildIndex( this, this.parent.numChildren-1 );		} 	}}