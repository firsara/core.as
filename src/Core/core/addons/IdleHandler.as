package core.addons{	import core.Core;	import core.events.CoreEvent;	import core.events.IdleEvent;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.utils.clearTimeout;	import flash.utils.setTimeout;
		//[ExcludeClass]	final public class IdleHandler	{		include '../_inc_/StaticEventHandler.as';		include '../_inc_/StaticRequire.as';				public static const USER_IDLE:String = "Status.USER_IDLE";		public static const USER_ACTIVE:String = "Status.USER_ACTIVE";				public static var timeout:Number = 10000;				private var _maxDistance:Number = 5;		private var _store:Object;		private var _idleTimeout:uint;		private var _status:String;						public function IdleHandler()		{			include '../_inc_/StaticRequireValidation.as';						if (Core.ready) setup();			else Core.addEventListener(CoreEvent.CORE_READY, setup);		}				private function setup(e:CoreEvent = null):void		{			if (e) Core.removeEventListener(CoreEvent.CORE_READY, setup);						_store = new Object();			startCheck();		}								private function startCheck():void		{			_store.position = new Point(Core.stage.mouseX, Core.stage.mouseY);						if(_idleTimeout) clearTimeout(_idleTimeout);			_idleTimeout = setTimeout(checkIdle, timeout);		}								private function checkIdle():void		{			if((Math.abs(_store.position.x - Core.stage.mouseX) +					Math.abs(_store.position.y - Core.stage.mouseY)) < _maxDistance)			{				setIdle();			}						startCheck();		}				private function setIdle():void		{			_status = USER_IDLE;						var idleEvent:IdleEvent = new IdleEvent(IdleEvent.USER_IDLE, _status);			dispatchEvent(idleEvent);			Core.dispatchEvent(idleEvent);			Core.stage.dispatchEvent(idleEvent);						Core.stage.addEventListener(MouseEvent.MOUSE_MOVE, stopIdle);		}				private function stopIdle(event:MouseEvent):void		{			_status = USER_ACTIVE;						var idleEvent:IdleEvent = new IdleEvent(IdleEvent.USER_ACTIVE, _status);			dispatchEvent(idleEvent);			Core.dispatchEvent(idleEvent);			Core.stage.dispatchEvent(idleEvent);						Core.stage.removeEventListener(MouseEvent.MOUSE_MOVE, stopIdle);						startCheck();		}			}	}