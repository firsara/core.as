package core.addons{	import core.Core;	import core.api.Config;  import core.events.CoreEvent;  import core.actions.log;    import flash.events.ErrorEvent;
		//[ExcludeClass]	final public class ErrorHandler	{		include '../_inc_/StaticRequire.as';				private static const UNCAUGHT_ERROR:String = "uncaughtError";		private static var _singleton:Boolean;						public function ErrorHandler()		{			include '../_inc_/StaticRequireValidation.as';						if (Core.ready) setup();			else Core.addEventListener(CoreEvent.CORE_READY, setup);		}				private function setup(e:CoreEvent = null):void		{			if (e) Core.removeEventListener(CoreEvent.CORE_READY, setup);						try			{				Core.root.loaderInfo["uncaughtErrorEvents"].addEventListener( UNCAUGHT_ERROR, throwError );			}						catch (error:Error) { trace('Error handling not supported') }		}						private function throwError(event:*):void		{			if (!Config.instance.debug) return;			    	var output:String;      			if      (event.error is Error)      output = String(Error(event.error).message);			else if (event.error is ErrorEvent) output = String(ErrorEvent(event.error).text);			else                                output = String(event.error);						core.actions.log(output, this);		}			}	}