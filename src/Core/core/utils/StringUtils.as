package core.utils{	public final class StringUtils  {		// STRING UTILS				// TRIM		public static function trim(value:String):String		{			return(ltrim(rtrim(value)));		}				public static function ltrim(value:String):String		{			var i:int = 0;			while ((i < value.length) && (value.substr(i, 1) == ' ')) i++;			return (value.substr(i, value.length - i));		}				public static function rtrim(value:String):String		{			var i:int = value.length -1;			while ((i > 0) && (value.substr(i, 1) == ' ')) i--;			return (value.substr(0, i + 1));		}								public static function upperCaseFirst(str:String):String		{			return (str.substring(0, 1).toUpperCase() + str.substring(1));		}								public static function stringsAreEqual(s1:String, s2:String, 																					 caseSensitive:Boolean):Boolean		{			if(caseSensitive)			{				return (s1 == s2);			}			else			{				return (s1.toUpperCase() == s2.toUpperCase());			}		}								public static function beginsWith(input:String, prefix:String):Boolean		{						return (prefix == input.substring(0, prefix.length));		}				public static function endsWith(input:String, suffix:String):Boolean		{			return (suffix == input.substring(input.length - suffix.length));		}						public static function remove(input:String, remove:String):String		{			return replace(input, remove, "");		}						public static function replace(input:String, replace:String, replaceWith:String):String		{			return input.split(replace).join(replaceWith);		}						public static function stringHasValue(s:String):Boolean		{			//todo: this needs a unit test			return (s != null && s.length > 0);					}								/**		 * Converts a String in the Format: key1: value1; key2: value2 into an Object containing the values with its associated keys 		 * */		public static function splitParameters(source:String, splitDelimeter:String = ";", parameterAssigner:String = ":"):Object		{			var object:Object = new Object();			var items:Array = StringUtils.trim(source).split(splitDelimeter);			var key:String, value:String;			var itemLength:int = items.length;			var item:Array;			var i:int;						for (i = 0; i < itemLength; i++)			{ 				item = String(items[i]).split(parameterAssigner);				key = StringUtils.trim(String(item[0]));				value = StringUtils.trim(String(item[1]));				object[key] = value;			}						return object;		}					}	}