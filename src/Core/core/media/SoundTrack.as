package core.media{	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.net.URLRequest;	import flash.utils.setTimeout;	import flash.utils.clearTimeout;  	import core.animation.Tween;  import core.animation.tweenlite.easing.Cubic;	import core.animation.tweenlite.TweenMax;	import core.animation.tweenlite.OverwriteManager;	import core.vars.SoundTrackVars;		public class SoundTrack extends EventDispatcher  {		private var _volume:Number;		private var _parameters:SoundTrackVars;				private var _track:Sound;		private var _output:SoundChannel;		private var _alive:Boolean = true;		private var _startTimeout:uint;				public function get track():Sound { return _track; }		public function set track(val:Sound):void		{			_track = track;		}				public function get volume():Number { return _volume; }		public function set volume(val:Number):void		{			_volume = val;			_output.soundTransform = new SoundTransform(_volume);		}				public function get parameters():SoundTrackVars { return _parameters; }		public function set parameters(val:SoundTrackVars):void		{			if (val == null) return;			_parameters = val;		}				public function get alive():Boolean {			return _alive;		}								public function SoundTrack()		{			super();						_parameters = new SoundTrackVars();		}						public function play(Path:String = ""):void {			if (Path != "") _track = new Sound(new URLRequest(Path) );						_startTimeout = setTimeout(startSound, parameters.delay * 1000);		}				public function stop():void {			if (_output) fadeOut(parameters.fade[1]);			else endSound();		}				public function fadeIn(duration:Number = -1):void {			if (duration == -1) duration = parameters.fade[0];			TweenMax.to(this, duration, {volume: parameters.volume, ease: Cubic.easeIn, overwrite: OverwriteManager.ALL_IMMEDIATE});		}		public function fadeOut(duration:Number = -1):void {			if (duration == -1) duration = parameters.fade[1];			TweenMax.to(this, duration, {volume: 0, ease: Cubic.easeOut, onComplete:endSound, overwrite: OverwriteManager.ALL_IMMEDIATE} );		}								private function startSound():void {			_output = _track.play(0, (parameters.loop ? int.MAX_VALUE : 0));			_output.addEventListener(Event.SOUND_COMPLETE, soundComplete );						volume = 0;			fadeIn(parameters.fade[0]);		}						private function soundComplete(event:Event):void {			if (parameters.loop) _track.play(0);			else endSound();		}						private function endSound():void {			_alive = false;			clearTimeout(_startTimeout);			dispatchEvent(new Event(Event.SOUND_COMPLETE));		}					}	}