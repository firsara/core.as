package core.api{	import core.settings.ConfigSetup;	import core.api.def.main;
		[ExcludeClass]  final dynamic public class Config  {		private static var _instance:Config;		public static function get instance():Config		{			if (!_instance) _instance = new Config();			return _instance;		}		    public var debug      :Boolean = ConfigSetup.DEBUG;    public var cache      :Boolean = ConfigSetup.CACHE;		public var console    :Boolean = ConfigSetup.CONSOLE;		public var server     :String = '';		public var parameters :Object;        public function Config()		{			if(_instance) throw new Error('Config already initialized');		}				public function setup():void		{      var root:* = (core.api.def.main.root ? core.api.def.main.root : core.api.def.main);      parameters = (root.loaderInfo.parameters ? root.loaderInfo.parameters : {});						debug   = Bool(get("debug", debug));      cache   = Bool(get("cache", cache));      console = Bool(get("console", console));			server  = get("server", server);		}				public function get(definition:String, defaultReturn:* = null):*		{			return (parameters[definition] || defaultReturn);		}				public function set(definition:String, value:* = null):*		{			parameters[definition] = value;		}				  }}