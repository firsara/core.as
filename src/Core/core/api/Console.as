package core.api{	import core.api.def.stage;	import core.display.MoveClip;	import core.text.TextArea;		import flash.display.Sprite;	import flash.events.Event;
		final public class Console extends Sprite	{		static private const CHILD_ID:String = 'core.app.Console';		static private const PADDING:int = 20;				static private var _bgColor:uint = 0x151515;		static private var _instance:Console;				private var _output:TextArea;		private var _holder:MoveClip;		private var _mask:Sprite;		private var _height:Number;		private var _width:Number;				// STATIC		{			(function():void			 {			 }			)();					 _instance = new Console();		 _instance.log('-----------------------------------------------');		 _instance.log('            CONSOLE STARTED');		 _instance.log('-----------------------------------------------');		}				static public function log(value:String):void		{			_instance.log(value);		}				public function get output():TextArea { return _output; }				public function Console():void		{			this.name = CHILD_ID;						_output = new TextArea('', 'Console');			_mask = new Sprite();			_holder = new MoveClip();			_holder.addChild(_output);						this.addChild(_holder);			this.addChild(_mask);			_holder.mask = _mask;						_output.x = PADDING;			_output.y = PADDING;						resize();			core.api.def.stage.addEventListener(Event.RESIZE, resize);		}						private function log(value:String):void		{			var keepScrolling:Boolean = (_holder.y < (PADDING*.25) - (_holder.height - _mask.height));						_output.htmlText += value;						resizeContent();						//_holder.lock = (_holder.height < _mask.height);			_holder.borders.x = [0 - (_holder.width - _mask.width) - PADDING, 0];			_holder.borders.y = [0 - (_holder.height - _mask.height), 0];						if (keepScrolling) _holder.y = _holder.borders.y[0];						if (Config.instance.console)			{				if (!this.parent) core.api.def.stage.addChild(this);				this.parent.setChildIndex(this, this.parent.numChildren - 1);			}      else			{				if (this.parent) this.parent.removeChild(this);			}						//this.y = core.api.def.stage.stageHeight - _mask.height;		}						private function resize(event:Event = null):void		{			_width = core.api.def.stage.stageWidth;			_height = int(core.api.def.stage.stageHeight / 3);			//_width = int(core.api.def.stage.stageWidth / 3);			//_height = core.api.def.stage.stageHeight;						this.graphics.clear();			this.graphics.beginFill(_bgColor, .8);			this.graphics.drawRect(0, 0, _width, _height);			this.graphics.endFill();						resizeContent();		}				private function resizeContent():void		{			_mask.y = PADDING - 1;			_mask.graphics.clear();			_mask.graphics.beginFill(0xFF0000, .5);			_mask.graphics.drawRect(0, 0, _width, _height - PADDING * 2 + 2);			_mask.graphics.endFill();						_holder.graphics.clear();			_holder.graphics.beginFill(0xFF0000, 0);			_holder.graphics.drawRect(0, 0, _width, Math.max(_mask.height, _output.height + PADDING * 2));			_holder.graphics.endFill();						//_output.width = _width;		}					}}