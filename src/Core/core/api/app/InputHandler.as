package core.api.app{	import core.api.def.stage;	import core.events.InputEvent;	import core.settings.InputSetup;		import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TouchEvent;	import flash.geom.Point;	import flash.ui.Mouse;	import flash.ui.Multitouch;	import flash.ui.MultitouchInputMode;		[ExcludeClass]	final public class InputHandler	{		include '../../_inc_/StaticRequire.as';		private static var         _instance :InputHandler;		public static function get instance():InputHandler { return _instance; }						private static var _points       :Array = new Array();				private var _storePos            :Point;		private var _storeTime           :Number;				public static function get points():Array { return _points; }		public static function getTouchPoint(event:*):Object { return points[event.touchPointID]; }						public static function dispose():void		{			_instance.dispose();		}				private function dispose():void		{			core.api.def.stage.removeEventListener(InputEvent.INPUT_DOWN, onDownHandler, true);			core.api.def.stage.removeEventListener(InputEvent.INPUT_CLICK, onClickHandler, true);						//core.def.stage.removeEventListener(MouseEvent.MOUSE_MOVE, onMoveHandler, true);						//core.def.stage.removeEventListener(TouchEvent.TOUCH_TAP, onTouchTap, true);			core.api.def.stage.removeEventListener(TouchEvent.TOUCH_BEGIN, onTouchBegin, true);			core.api.def.stage.removeEventListener(TouchEvent.TOUCH_END, onTouchEnd, true);			core.api.def.stage.removeEventListener(TouchEvent.TOUCH_MOVE, onTouchMove, true);		}						public function InputHandler()		{			include '../../_inc_/StaticRequireValidation.as';			_instance = this;			_storePos = new Point();			      core.api.def.stage.addEventListener(InputEvent.INPUT_DOWN, onDownHandler, true);      core.api.def.stage.addEventListener(InputEvent.INPUT_CLICK, onClickHandler, true);            try      {				Multitouch.inputMode = InputSetup.inputMode;      }      catch(error:*) {}												switch(InputSetup.inputMode)			{				case MultitouchInputMode.TOUCH_POINT:					//core.def.stage.addEventListener(TouchEvent.TOUCH_TAP, onTouchTap, true);					core.api.def.stage.addEventListener(TouchEvent.TOUCH_BEGIN, onTouchBegin, true);					core.api.def.stage.addEventListener(TouchEvent.TOUCH_END, onTouchEnd, true);					core.api.def.stage.addEventListener(TouchEvent.TOUCH_MOVE, onTouchMove, true);					if (Multitouch.supportsTouchEvents) Mouse.hide();				break;								case MultitouchInputMode.GESTURE:					core.api.def.stage.addEventListener(TouchEvent.TOUCH_END, onTouchEnd, true);					if (Multitouch.supportsTouchEvents) Mouse.hide();				break;								case MultitouchInputMode.NONE:				default:					Mouse.show();				break;			}		}				//private function onTouchTap(event:TouchEvent):void   { event.target.dispatchEvent(new MouseEvent(MouseEvent.CLICK)); }		//private function onTouchBegin(event:TouchEvent):void { event.target.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN)); }		//private function onTouchEnd(event:TouchEvent):void   { event.target.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP)); }		//private function onTouchMove(event:TouchEvent):void  { event.target.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_MOVE)); }				private function get pointLength():int		{			var count:int = 0; var key:String;			for (key in _points) if(_points[key].active == true) count++;			return count;		}		private function onTouchBegin(event:*):void		{			if (!_points[event.touchPointID]) _points[event.touchPointID] = {};			_points[event.touchPointID].x = event.stageX;			_points[event.touchPointID].y = event.stageY;			_points[event.touchPointID].active = true;						//if (pointLength >= 2) Core.input = MultitouchInputMode.GESTURE;			//else if (Core.input != MultitouchInputMode.TOUCH_POINT) Core.input = MultitouchInputMode.TOUCH_POINT;		}		private function onTouchEnd(event:*):void		{			delete _points[event.touchPointID];						//if (pointLength <= 1)				   //Core.input = MultitouchInputMode.TOUCH_POINT;			//else Core.input = MultitouchInputMode.GESTURE;		}		private function onTouchMove(event:*):void		{			_points[event.touchPointID].x = event.stageX;			_points[event.touchPointID].y = event.stageY;		}						private function onDownHandler(event:*):void		{			if (!_points['mouse']) _points['mouse'] = {x: event.stageX, y: event.stageY};						_storePos  = new Point(event.stageX, event.stageY);			_storeTime = new Date().getTime();		}				private function onClickHandler(event:*):void		{      //trace('X: ' + Math.abs(event.stageX - _storePos.x) + ' | Y: ' + Math.abs(event.stageY - _storePos.y));			if (Math.abs(event.stageX - _storePos.x) + Math.abs(event.stageY - _storePos.y) > InputSetup.clickMaxMove) stopEvent(event);      else if ((new Date().getTime() - _storeTime) > InputSetup.clickMaxTime) stopEvent(event); 		}				private function stopEvent(event:Event):void		{			event.stopImmediatePropagation();			event.stopPropagation();			event.preventDefault();		}	}	}